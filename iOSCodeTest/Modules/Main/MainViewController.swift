//
//  MainViewController.swift
//  iOSCodeTest
//
//  Created by Joonghoo Im on 2021/04/14.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MainViewController: UIViewController {
    enum ScreenMode {
        case normal
        case search
        //case searchHistory
    }

    @IBOutlet weak var categoryCollectionView: UICollectionView!
    @IBOutlet weak var pictureCollectionView: UICollectionView!
    @IBOutlet weak var searchHistoryView: UIView!
    @IBOutlet weak var searchHistoryCollectionView: UICollectionView!
    @IBOutlet weak var searchTextField: UITextField!
    // MARK: - Public properties -

    var presenter: MainPresenterInterface!

    private var currentScreenMode: ScreenMode = .normal

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()

        presenter.viewDidLoad()
        setupUI()
    }
    @IBAction func clearButtonTouched(_ sender: Any) {
        presenter.clearSearchHistory()
    }
}

// MARK: - Extensions -

extension MainViewController: MainViewInterface {
    func setupUI() {
        let pictureCollectionViewLayout = UICollectionViewFlowLayout()

        pictureCollectionViewLayout.headerReferenceSize = .zero
        pictureCollectionViewLayout.footerReferenceSize = .zero
        pictureCollectionViewLayout.scrollDirection = .vertical
        pictureCollectionViewLayout.sectionInset = .zero

        pictureCollectionView.setCollectionViewLayout(pictureCollectionViewLayout, animated: false)

        pictureCollectionView.dataSource = self
        pictureCollectionView.delegate = self

        let pictureBundle = Bundle(for: MainPictureCell.self)
        let pictureNib = UINib(nibName: String(describing: MainPictureCell.self), bundle: pictureBundle)

        pictureCollectionView.register(pictureNib, forCellWithReuseIdentifier: String(describing: MainPictureCell.self))

        let categoryCollectionViewLayout = UICollectionViewFlowLayout()

        categoryCollectionViewLayout.headerReferenceSize = .zero
        categoryCollectionViewLayout.footerReferenceSize = .zero
        categoryCollectionViewLayout.scrollDirection = .horizontal
        categoryCollectionViewLayout.sectionInset = .zero

        categoryCollectionView.setCollectionViewLayout(categoryCollectionViewLayout, animated: false)

        categoryCollectionView.dataSource = self
        categoryCollectionView.delegate = self

        let categoryBundle = Bundle(for: MainCategoryCell.self)
        let categoryNib = UINib(nibName: String(describing: MainCategoryCell.self), bundle: categoryBundle)

        categoryCollectionView.register(categoryNib, forCellWithReuseIdentifier: String(describing: MainCategoryCell.self))

        let searchHistoryCollectionViewLayout = UICollectionViewFlowLayout()

        searchHistoryCollectionViewLayout.headerReferenceSize = .zero
        searchHistoryCollectionViewLayout.footerReferenceSize = .zero
        searchHistoryCollectionViewLayout.scrollDirection = .horizontal
        searchHistoryCollectionViewLayout.sectionInset = .zero

        searchHistoryCollectionView.setCollectionViewLayout(searchHistoryCollectionViewLayout, animated: false)

        searchHistoryCollectionView.dataSource = self
        searchHistoryCollectionView.delegate = self

        let searchHistoryBundle = Bundle(for: SearchHistoryCell.self)
        let searchHistoryNib = UINib(nibName: String(describing: SearchHistoryCell.self), bundle: searchHistoryBundle)

        searchHistoryCollectionView.register(searchHistoryNib, forCellWithReuseIdentifier: String(describing: SearchHistoryCell.self))

        searchTextField.delegate = self
        searchTextField.clearButtonMode = .whileEditing
    }

    func updateTopicList() {
        DispatchQueue.main.async {
            self.categoryCollectionView.reloadData()
            self.categoryCollectionView.layoutIfNeeded()
        }
    }

    func updatePhotoList() {
        self.pictureCollectionView.reloadData()
        self.pictureCollectionView.layoutIfNeeded()
    }

    func updatePhotoListWithPosition(currentSection: Int, currentIndex: Int) {
        updatePhotoList()
        self.pictureCollectionView.scrollToItem(at: IndexPath(item: currentIndex, section: currentSection), at: .centeredVertically, animated: false)
    }

    func updateSearchHistory() {
        DispatchQueue.main.async {
            self.searchHistoryCollectionView.reloadData()
            self.searchHistoryCollectionView.layoutIfNeeded()
        }
    }
}

private extension MainViewController {
    func switchScreenMode(to mode: ScreenMode) {
        switch mode {
        case .normal:
            pictureCollectionView.isHidden = false
            searchHistoryView.isHidden = true
        case .search:
            pictureCollectionView.isHidden = true
            searchHistoryView.isHidden = false
        }
    }
}

extension MainViewController: UICollectionViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let position = scrollView.contentOffset.y

        if position > pictureCollectionView.contentSize.height - scrollView.frame.size.height - 100 {
            presenter.requestMorePhoto()
        }
    }
}

extension MainViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        if collectionView == categoryCollectionView {
            return presenter.getTopicSectionCount()
        } else if collectionView == pictureCollectionView {
            return presenter.getPhotoSectionCount()
        } else if collectionView == searchHistoryCollectionView {
            return 1
        } else {
            return 0
        }
    }

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == categoryCollectionView {
            return presenter.getTopicSectionList(for: section).count
        } else if collectionView == pictureCollectionView {
            return presenter.getPhotoSectionList(for: section).count
        } else if collectionView == searchHistoryCollectionView {
            return presenter.getSearchHistory().count
        } else {
            return 0
        }
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == categoryCollectionView {
            let cell = categoryCollectionView.dequeueReusableCell(withReuseIdentifier: String(describing: MainCategoryCell.self), for: indexPath) as! MainCategoryCell

            cell.topicItem = presenter.getTopicSectionList(for: indexPath.section)[indexPath.item]

            return cell
        } else if collectionView == pictureCollectionView {
            let cell = pictureCollectionView.dequeueReusableCell(withReuseIdentifier: String(describing: MainPictureCell.self), for: indexPath) as! MainPictureCell

            cell.photoItem = presenter.getPhotoSectionList(for: indexPath.section)[indexPath.item]

            return cell
        } else if collectionView == searchHistoryCollectionView {
            let cell = searchHistoryCollectionView.dequeueReusableCell(withReuseIdentifier: String(describing: SearchHistoryCell.self), for: indexPath) as! SearchHistoryCell

            cell.searchHistoryItem = presenter.getSearchHistory()[indexPath.item]

            return cell
        } else {
            return UICollectionViewCell()
        }
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == categoryCollectionView {

        } else if collectionView == pictureCollectionView {
            collectionView.deselectItem(at: indexPath, animated: false)
            presenter.moveToDetail(section: indexPath.section, index: indexPath.item)
        } else if collectionView == searchHistoryCollectionView {
            collectionView.deselectItem(at: indexPath, animated: false)
            searchTextField.resignFirstResponder()
            
            presenter.searchPhoto(searchText: presenter.getSearchHistory()[indexPath.item].searchText)
            switchScreenMode(to: .normal)
        }
    }

}

extension MainViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if collectionView == pictureCollectionView {
            return CGSize(width: collectionView.frame.width, height: 200)
        } else if collectionView == categoryCollectionView {
            return CGSize(width: 60, height: 30)
        } else if collectionView == searchHistoryCollectionView {
            return CGSize(width: collectionView.frame.width, height: 40)
        } else {
            return .zero
        }
    }
}

extension MainViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        presenter.loadSearchHistory()
        switchScreenMode(to: .search)
    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        guard let searchText = textField.text, searchText != ""  else {
            return false
        }

        textField.resignFirstResponder()

        presenter.saveSearchHistory(searchText: searchText)
        presenter.searchPhoto(searchText: searchText)

        switchScreenMode(to: .normal)

        return false
    }

    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        textField.text = ""
        textField.resignFirstResponder()

        switchScreenMode(to: .normal)
        return false
    }
}
