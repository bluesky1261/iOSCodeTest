//
//  SearchViewController.swift
//  iOSCodeTest
//
//  Created by Joonghoo Im on 2021/04/17.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class SearchViewController: UIViewController {
    enum ScreenMode {
        case searchHistory
        case searchResult
    }

    @IBOutlet weak var searchResultCollectionView: UICollectionView!
    @IBOutlet weak var searchHistoryView: UIView!
    @IBOutlet weak var searchHistoryCollectionView: UICollectionView!
    @IBOutlet weak var searchTextField: UITextField!
    
    // MARK: - Public properties -

    var presenter: SearchPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()

        presenter.viewDidLoad()
        setupUI()
    }

    @IBAction func clearButtonTouched(_ sender: Any) {
        presenter.clearSearchHistory()
    }
}

// MARK: - Extensions -

extension SearchViewController: SearchViewInterface {
    func setupUI() {
        switchScreenMode(to: .searchHistory)

        let searchHistoryCollectionViewLayout = UICollectionViewFlowLayout()

        searchHistoryCollectionViewLayout.headerReferenceSize = .zero
        searchHistoryCollectionViewLayout.footerReferenceSize = .zero
        searchHistoryCollectionViewLayout.scrollDirection = .horizontal
        searchHistoryCollectionViewLayout.sectionInset = .zero

        searchHistoryCollectionView.setCollectionViewLayout(searchHistoryCollectionViewLayout, animated: false)

        searchHistoryCollectionView.dataSource = self
        searchHistoryCollectionView.delegate = self

        let searchHistoryBundle = Bundle(for: SearchHistoryCell.self)
        let searchHistoryNib = UINib(nibName: String(describing: SearchHistoryCell.self), bundle: searchHistoryBundle)

        searchHistoryCollectionView.register(searchHistoryNib, forCellWithReuseIdentifier: String(describing: SearchHistoryCell.self))

        let searchResultCollectionViewLayout = UICollectionViewFlowLayout()

        searchResultCollectionViewLayout.headerReferenceSize = .zero
        searchResultCollectionViewLayout.footerReferenceSize = .zero
        searchResultCollectionViewLayout.scrollDirection = .vertical
        searchResultCollectionViewLayout.sectionInset = .zero

        searchResultCollectionView.setCollectionViewLayout(searchResultCollectionViewLayout, animated: false)

        searchResultCollectionView.dataSource = self
        searchResultCollectionView.delegate = self

        let searchResultBundle = Bundle(for: MainPictureCell.self)
        let searchResultNib = UINib(nibName: String(describing: MainPictureCell.self), bundle: searchResultBundle)

        searchResultCollectionView.register(searchResultNib, forCellWithReuseIdentifier: String(describing: MainPictureCell.self))

        searchTextField.delegate = self
        searchTextField.clearButtonMode = .whileEditing
    }

    func updateSearchHistory() {
        DispatchQueue.main.async {
            self.searchHistoryCollectionView.reloadData()
            self.searchHistoryCollectionView.layoutIfNeeded()
        }
    }

    func updateSearchList() {
        self.searchResultCollectionView.reloadData()
        self.searchResultCollectionView.layoutIfNeeded()
    }

    func updateSearchListWithPosition(currentSection: Int, currentIndex: Int) {
        updateSearchList()
        self.searchResultCollectionView.scrollToItem(at: IndexPath(item: currentIndex, section: currentSection), at: .centeredVertically, animated: false)
    }
}

private extension SearchViewController {
    func switchScreenMode(to mode: ScreenMode) {
        switch mode {
        case .searchResult:
            searchResultCollectionView.isHidden = false
            searchHistoryView.isHidden = true
        case .searchHistory:
            searchResultCollectionView.isHidden = true
            searchHistoryView.isHidden = false
        }
    }
}

extension SearchViewController: UICollectionViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let position = scrollView.contentOffset.y

        if position > searchResultCollectionView.contentSize.height - scrollView.frame.size.height - 100 {
            presenter.requestMorePhoto(searchText: searchTextField.text ?? "")
        }
    }
}

extension SearchViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        if collectionView == searchResultCollectionView {
            return presenter.getSearchSectionCount()
        } else if collectionView == searchHistoryCollectionView {
            return 1
        } else {
            return 0
        }
    }

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == searchResultCollectionView {
            return presenter.getSearchSectionList(for: section).count
        } else if collectionView == searchHistoryCollectionView {
            return presenter.getSearchHistory().count
        } else {
            return 0
        }
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == searchResultCollectionView {
            let cell = searchResultCollectionView.dequeueReusableCell(withReuseIdentifier: String(describing: MainPictureCell.self), for: indexPath) as! MainPictureCell

            cell.photoItem = presenter.getSearchSectionList(for: indexPath.section)[indexPath.item]

            return cell
        } else if collectionView == searchHistoryCollectionView {
            let cell = searchHistoryCollectionView.dequeueReusableCell(withReuseIdentifier: String(describing: SearchHistoryCell.self), for: indexPath) as! SearchHistoryCell

            cell.searchHistoryItem = presenter.getSearchHistory()[indexPath.item]

            return cell
        } else {
            return UICollectionViewCell()
        }
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == searchResultCollectionView {
            collectionView.deselectItem(at: indexPath, animated: false)
            presenter.moveToDetail(section: indexPath.section, index: indexPath.item)
        } else if collectionView == searchHistoryCollectionView {
            collectionView.deselectItem(at: indexPath, animated: false)

            let searchText = presenter.getSearchHistory()[indexPath.item].searchText
            searchTextField.text = searchText
            searchTextField.resignFirstResponder()

            presenter.clearSearch()
            presenter.searchPhoto(searchText: searchText)
            switchScreenMode(to: .searchResult)
        }
    }

}

extension SearchViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if collectionView == searchResultCollectionView {
            return CGSize(width: collectionView.frame.width, height: 200)
        } else if collectionView == searchHistoryCollectionView {
            return CGSize(width: collectionView.frame.width, height: 40)
        } else {
            return .zero
        }
    }
}

extension SearchViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        guard let searchText = textField.text, searchText != ""  else {
            return false
        }

        textField.resignFirstResponder()

        presenter.saveSearchHistory(searchText: searchText)
        presenter.clearSearch()
        presenter.searchPhoto(searchText: searchText)

        switchScreenMode(to: .searchResult)

        return false
    }

    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        textField.text = ""
        textField.resignFirstResponder()

        presenter.loadSearchHistory()
        presenter.clearSearch()

        switchScreenMode(to: .searchHistory)
        return false
    }
}
